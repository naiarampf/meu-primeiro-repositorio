CREATE TABLE MARCA(
	ID_MARCA INTEGER PRIMARY KEY,
	NOME VARCHAR (30) NOT NULL UNIQUE
);

CREATE TABLE PRODUTO(
	ID_PRODUTO INTEGER PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL,
	ID_MARCA INTEGER REFERENCES MARCA(ID_MARCA)
);

CREATE TABLE CLIENTE(
	ID_CLIENTE INTEGER PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL,
	RUA VARCHAR(100),
	NUMERO INTEGER,
	BAIRRO VARCHAR(100),
	ID_CIDADE INTEGER 
);

CREATE TABLE ESTADO(
	ID_ESTADO INTEGER PRIMARY KEY,
	NOME VARCHAR(20) NOT NULL UNIQUE,
	UF CHAR(2) NOT NULL UNIQUE
);

CREATE TABLE CIDADE(
	ID_CIDADE INTEGER PRIMARY KEY,
	NOME VARCHAR(100) NOT NULL,
	ID_ESTADO INTEGER REFERENCES ESTADO(ID_ESTADO),
	ID_PAIS INTEGER
);

CREATE TABLE VENDA(
	ID_VENDA SERIAL PRIMARY KEY,
	ID_CLIENTE INTEGER REFERENCES CLIENTE(ID_CLIENTE) NOT NULL,
	DATA_HORA_VENDA TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	VALOR_TOTAL NUMERIC(12,2) DEFAULT 0
);

CREATE TABLE PRODUTO_VENDA(
	ID_VENDA INTEGER REFERENCES VENDA(ID_VENDA) NOT NULL,
	ID_PRODUTO INTEGER REFERENCES PRODUTO(ID_PRODUTO) NOT NULL,
	QUANTIDADE NUMERIC (12,3) NOT NULL,
	PRECO NUMERIC (12,2) NOT NULL
);

ALTER TABLE CLIENTE ADD COLUMN CPF CHAR(11) UNIQUE NOT NULL
ALTER TABLE CIDADE DROP COLUMN ID_PAIS
ALTER TABLE CIDADE ADD ID_PAIS INTEGER
ALTER TABLE CLIENTE ADD CONSTRAINT CIDADEFK FOREIGN KEY(ID_CIDADE) REFERENCES CIDADE(ID_CIDADE)


--ADICIONANDO PRIMARY KEY TABELA PRODUTO_VENDA
ALTER TABLE PRODUTO_VENDA ADD PRIMARY KEY(ID_VENDA, ID_PRODUTO);

INSERT INTO MARCA(ID_MARCA, NOME)
	       VALUES(1       ,'OSTER');
INSERT INTO MARCA(ID_MARCA,NOME)
           VALUES(2       ,'PHILCO');
INSERT INTO MARCA(ID_MARCA, NOME)
	       VALUES(3       ,'BRITANIA');

INSERT INTO PRODUTO(ID_PRODUTO, NOME           , ID_MARCA)
             VALUES(1         , 'LIQUIDIFICADOR',       1);
INSERT INTO PRODUTO(ID_PRODUTO, NOME           , ID_MARCA)
             VALUES(2         , 'FERRO DE PASSAR',      1);
INSERT INTO PRODUTO(ID_PRODUTO, NOME           , ID_MARCA)
             VALUES(3         , 'FRITADEIRA AIR FRYER', 2);
INSERT INTO PRODUTO(ID_PRODUTO, NOME           , ID_MARCA)
             VALUES(4         , 'ASPIRADOR DE PÓ',      2);
INSERT INTO PRODUTO(ID_PRODUTO, NOME           , ID_MARCA)
             VALUES(5         , 'SECADOR DE CABELOS',   3);
INSERT INTO PRODUTO(ID_PRODUTO, NOME           , ID_MARCA)
             VALUES(6        , 'PANIFICADORA'  ,        3);
			 
INSERT INTO ESTADO(ID_ESTADO, NOME                   , UF)
	        VALUES(1        ,'PARANÁ'              , 'PR');
INSERT INTO ESTADO(ID_ESTADO, NOME                   , UF)
            VALUES(2        ,'SANTA CATARINA'        ,'SC');
			
INSERT INTO CIDADE(ID_CIDADE, NOME, ID_ESTADO)
           VALUES(1        , 'SERRA ALTA',  1);
INSERT INTO CIDADE(ID_CIDADE, NOME, ID_ESTADO)
           VALUES(2        , 'MODELO'    ,  1);
INSERT INTO CIDADE(ID_CIDADE, NOME, ID_ESTADO)
           VALUES(3        , 'PINHALZINHO', 1);
INSERT INTO CIDADE(ID_CIDADE, NOME, ID_ESTADO)
           VALUES(4        , 'PATO BRANCO', 2);
INSERT INTO CIDADE(ID_CIDADE, NOME, ID_ESTADO)
           VALUES(5        , 'DOIS VIZINHOS', 2);
INSERT INTO CIDADE(ID_CIDADE, NOME, ID_ESTADO)
           VALUES(6        , 'CASCAVEL'    , 2);
		   
INSERT INTO CLIENTE(ID_CLIENTE, NOME            ,CPF            , RUA             , NUMERO, BAIRRO  , ID_CIDADE)
			VALUES(1          ,'NAIARA DE PAULA', '11111111111', 'RUA DAS OLIVAS', 112   , 'CENTRO', 1        );
INSERT INTO CLIENTE(ID_CLIENTE, NOME            ,CPF            , RUA             , NUMERO, BAIRRO  , ID_CIDADE)
			VALUES(2          ,'TAINARA DE PAULA', '22222222222', 'RUA DAS FLORES', 113   , 'CENTRO', 2       );		   
INSERT INTO CLIENTE(ID_CLIENTE, NOME            ,CPF            , RUA             , NUMERO, BAIRRO  , ID_CIDADE)
			VALUES(3          ,'MIGUEL DE PAULA', '33333333333', 'RUA DAS JOIAS' , 114   , 'CENTRO', 3        );
INSERT INTO CLIENTE(ID_CLIENTE, NOME            ,CPF            , RUA             , NUMERO, BAIRRO  , ID_CIDADE)
			VALUES(4          ,'VILSON DE PAULA', '44444444444', 'RUA DAS PALMAS', 115   , 'CENTRO', 4        );
INSERT INTO CLIENTE(ID_CLIENTE, NOME            ,CPF            , RUA             , NUMERO, BAIRRO  , ID_CIDADE)
			VALUES(5          ,'MARLI DE PAULA' , '55555555555', 'RUA DAS ORCAS ', 116   , 'CENTRO', 5        );
			
CREATE OR REPLACE FUNCTION TF_GERAR_SALDO_ESTOQUE()
RETURNS TRIGGER AS $$
	BEGIN 
		IF UPPER(TG_OP) = 'INSERT' THEN
			UPDATE PRODUTO SET SALDO_ESTOQUE = SALDO_ESTOQUE - NEW.QUANTIDADE
			WHERE ID_PRODUTO = NEW.ID_PRODUTO;
		END IF;
		IF UPPER(TG_OP) = 'DELETE' THEN
			UPDATE PRODUTO SET SALDO_ESTOQUE = SALDO_ESTOQUE + OLD.QUANTIDADE
			WHERE ID_PRODUTO = OLD.ID_PRODUTO;
		END IF;
		IF UPPER(TG_OP) = 'UPDATE' THEN
			UPDATE PRODUTO SET SALDO_ESTOQUE = SALDO_ESTOQUE + (NEW.QUANTIDADE - OLD.QUANTIDADE)
			WHERE ID_PRODUTO = NEW.ID_PRODUTO;
		END IF;
		RETURN NULL;
     END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TR_SALDO_VENDA
--DEPOIS DE INSERIR, DELETAR OU ATUALIZAR ALGO NA TABELA PRODUTO_VENDA 
AFTER INSERT OR DELETE OR UPDATE ON PRODUTO_VENDA
--PARA CADA LINHA(ITEM)
FOR EACH ROW
--EXECUTE A FUNÇÃO
EXECUTE FUNCTION TF_GERAR_SALDO_ESTOQUE();

--ADICIONAR COLUNA SALDO_ESTOQUE NA TABELA PRODUTO
ALTER TABLE PRODUTO ADD COLUMN SALDO_ESTOQUE NUMERIC (12,3) DEFAULT 100

INSERT INTO VENDA(ID_CLIENTE) VALUES(1);
INSERT INTO PRODUTO_VENDA VALUES(1,1,1,10);
INSERT INTO PRODUTO_VENDA VALUES(1,2,2,12.75);

--SELECT USADO PARA MOSTRAR PRODUTO, MARCA, SALDO_ESTOQUE, VALOR_UNITARIO DOS PRODUTOS VENDIDOS.
SELECT PRODUTO.NOME AS PRODUTO , MARCA.NOME AS MARCA, PRODUTO.SALDO_ESTOQUE, PV.PRECO AS VALOR_UNITARIO
FROM PRODUTO
INNER JOIN MARCA ON(MARCA.ID_MARCA = PRODUTO.ID_MARCA)
INNER JOIN PRODUTO_VENDA AS PV ON (PV.ID_PRODUTO = PRODUTO.ID_PRODUTO)
ORDER BY PRODUTO.NOME
--LIMIT 10 SE PRECISAR 

--TRIGGER PARA ATUALIZAR VALOR TOTAL DA VENDA 
CREATE OR REPLACE FUNCTION TF_VALOR_TOTAL_VENDA()
RETURNS TRIGGER AS $$
	BEGIN 
		IF UPPER(TG_OP) = 'INSERT' THEN
			UPDATE VENDA
			SET VALOR_TOTAL = VALOR_TOTAL + (NEW.QUANTIDADE * NEW.PRECO)
			WHERE ID_VENDA = NEW.ID_VENDA;
		END IF;
		    IF UPPER(TG_OP) = 'DELETE' THEN
			UPDATE VENDA
			SET VALOR_TOTAL = VALOR_TOTAL - (OLD.QUANTIDADE * OLD.PRECO)
			WHERE ID_VENDA = OLD.ID_VENDA;
		END IF;
		    IF UPPER(TG_OP) = 'UPDATE' THEN
			UPDATE VENDA
			SET VALOR_TOTAL = VALOR_TOTAL + ((NEW.QUANTIDADE * NEW.PRECO) - (OLD.QUANTIDADE * OLD.PRECO))
			WHERE ID_VENDA = NEW.ID_VENDA;
		END IF;
		RETURN NULL;
     END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER TR_VALOR_TOTAL
--DEPOIS DE INSERIR, DELETAR OU ATUALIZAR ALGO NA TABELA PRODUTO_VENDA 
AFTER INSERT OR DELETE OR UPDATE ON PRODUTO_VENDA
--PARA CADA LINHA(ITEM)
FOR EACH ROW
--EXECUTE A FUNÇÃO
EXECUTE FUNCTION TF_VALOR_TOTAL_VENDA();

DELETE FROM PRODUTO_VENDA
SELECT * FROM PRODUTO_VENDA
SELECT * FROM VENDA
UPDATE VENDA SET VALOR_TOTAL = 0 WHERE ID_VENDA = 1




		   
		   
		   
		   






